import asyncio
import time
from backend.agents.agent_scalping import agent_scalping
from backend.config.config_scalping import SCALPING_CONFIG

# ‚öôÔ∏è Par√¢metros configur√°veis
SYMBOLS = SCALPING_CONFIG.get("symbols_to_trade", ["BTCUSDT", "ETHUSDT", "SOLUSDT"])
LOOP_DELAY = SCALPING_CONFIG.get("check_interval_seconds", 0.8)


async def run_symbol_loop(symbol: str):
    """
    Loop ass√≠ncrono individual para um s√≠mbolo.
    Executa o agente de scalping ciclicamente com um delay fixo.
    """
    while True:
        try:
            start = time.perf_counter()
            print(f"[{symbol}] üöÄ In√≠cio da an√°lise")

            await agent_scalping(symbol)

            duration = time.perf_counter() - start
            print(
                f"[{symbol}] ‚úÖ Conclu√≠do em {duration:.2f}s. Pausa de {LOOP_DELAY}s...\n"
            )

        except Exception as e:
            print(f"[{symbol}] ‚ùå Erro inesperado: {e}")

        await asyncio.sleep(LOOP_DELAY)


async def main():
    """
    Inicia todos os loops ass√≠ncronos em paralelo.
    """
    print(f"üîÅ Iniciando scalping para {len(SYMBOLS)} s√≠mbolos: {', '.join(SYMBOLS)}")
    tasks = [run_symbol_loop(symbol) for symbol in SYMBOLS]
    await asyncio.gather(*tasks)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë Execu√ß√£o interrompida manualmente.")
